#include <QtCore>
#include <QByteArray>
#include "qt-openzwave/qtozw_pods.h"

class QTOZWManager {
    ENUM QTOZWErrorCodes {
        homeId_Invalid,
        nodeId_Invalid,
        valueIDKey_Invalid,
        Manager_Not_Started,
        OZWException,
        setupFailed,
        NoError
    };

    ENUM QTOZWMetaDataField {
        OZWInfoURL = 0,
        ZWAProductURL = 1,
        ProductPic = 2,
        Description = 3,
        ProductManualURL = 4,
        ProductPageURL = 5,
        InclusionHelp = 6,
        ExclusionHelp = 7,
        ResetHelp = 8,
        WakeupHelp = 9,
        ProductSupportURL = 10,
        Frequency = 11,
        Name = 12,
        Identifier = 13
    }

    PROP(bool running SOURCEONLYSETTER)
    PROP(quint32 homeId SOURCEONLYSETTER)
    PROP(QString errorString SOURCEONLYSETTER)

    SIGNAL(valueAdded(quint64 vidKey))
    SIGNAL(valueRemoved(quint64 vidKey))
    SIGNAL(valueChanged(quint64 vidKey))
    SIGNAL(valueRefreshed(quint64 vidKey))
    SIGNAL(nodeNew(quint8 node))
    SIGNAL(nodeAdded(quint8 node))
    SIGNAL(nodeRemoved(quint8 node))
    SIGNAL(nodeReset(quint8 node))
    SIGNAL(nodeNaming(quint8 node))
    SIGNAL(nodeEvent(quint8 node, quint8 event))
    SIGNAL(nodeProtocolInfo(quint8 node))
    SIGNAL(nodeEssentialNodeQueriesComplete(quint8 node))
    SIGNAL(nodeQueriesComplete(quint8 node))
    SIGNAL(driverReady(quint32 homeID))
    SIGNAL(driverFailed(quint32 homeID))
    SIGNAL(driverReset(quint32 homeID))
    SIGNAL(driverRemoved(quint32 homeID))
    SIGNAL(driverAllNodesQueriedSomeDead())
    SIGNAL(driverAllNodesQueried())
    SIGNAL(driverAwakeNodesQueried())
    SIGNAL(controllerCommand(quint8 command))
//    SIGNAL(ozwNotification(OpenZWave::Notification::NotificationCode event))
// SIGNAL(ozwUserAlert(OpenZWave::Notification::UserAlertNotification event))
    SIGNAL(manufacturerSpecificDBReady())

    SIGNAL(starting());
    SIGNAL(started(quint32 homeID))
    SIGNAL(stopped(quint32 homeID))
    SIGNAL(error(QTOZWErrorCodes errorcode))

    SLOT(bool open(QString serialPort))
    SLOT(bool refreshNodeInfo(quint8 _node))
    SLOT(bool requestNodeState(quint8 _node))
    SLOT(bool requestNodeDynamic(quint8 _node))

    SLOT(bool setConfigParam(quint8 _node, quint8 _param, qint32 _value, quint8 const _size))
    SLOT(void requestConfigParam(quint8 _node, quint8 _param))
    SLOT(void requestAllConfigParam(quint8 _node))
    SLOT(void softResetController())
    SLOT(void hardResetController())

    SLOT(bool cancelControllerCommand())
    SLOT(void testNetworkNode(quint8 _node, quint32 const _count))
    SLOT(void testNetwork(quint32 const _count))
    SLOT(void healNetworkNode(quint8 _node, bool _doRR))
    SLOT(void healNetwork(bool _doRR))
    SLOT(bool addNode(bool _doSecure))
    SLOT(bool removeNode())
    SLOT(bool removeFailedNode(quint8 _node))
    SLOT(bool hasNodeFailed(quint8 _node))
    SLOT(bool requestNodeNeighborUpdate(quint8 _node))
    SLOT(bool assignReturnRoute(quint8 _node))
    SLOT(bool deleteAllReturnRoute(quint8 _node))
    SLOT(bool sendNodeInfomation(quint8 _node))
    SLOT(bool replaceFailedNode(quint8 _node))
    SLOT(bool requestNetworkUpdate(quint8 _node))

    SLOT(QString GetMetaData(quint8 _node, QTOZWMetaDataField _field))
    SLOT(QByteArray GetMetaDataProductPic(quint8 _node))

    SLOT(QString GetNodeQueryStage(quint8 _node))
    SLOT(NodeStatistics GetNodeStatistics(quint8 _node))
    SLOT(bool IsNodeFailed(quint8 _node))
    SLOT(bool checkLatestConfigFileRevision(quint8 const _node))
    SLOT(bool checkLatestMFSRevision())
    SLOT(bool downloadLatestConfigFileRevision(quint8 const _node))
    SLOT(bool downloadLatestMFSRevision())

}
